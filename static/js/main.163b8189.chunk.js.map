{"version":3,"sources":["components/commonComponents/CardDesign.js","components/utills.js","components/post/subComponents/InteractionContainer.js","reduxHelpers/actions.js","reduxHelpers/constants.js","components/post/subComponents/UserProfileIcon.js","components/post/subComponents/CommentContainer.js","components/post/subComponents/Author.js","components/post/subComponents/SubPost.js","components/post/Post.js","components/PostContainer.js","App.js","reduxHelpers/reducers.js","serviceWorker.js","index.js"],"names":["CardDesign","_ref","children","_ref$className","className","react_default","a","createElement","concat","getPostTypeText","element_type","postTypeText","InteractionContainer","handleLikeIconClick","_this$props","_this","props","element_id","onLikeClick","_this$props$totalLike","totalLikes","newLikeCount","handleCommentClick","_this$props2","this","_this$props2$totalLik","_this$props2$totalCom","totalComments","onClick","Component","connect","state","ownProps","elementData","dispatch","data","type","payload","updateLike","UserProfileIcon","imageUrl","iconStyle","name","backgroundImage","style","CommentContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getComments","commentData","map","value","index","key","customerData","commentText","addNewComment","setState","prevState","push","postComment","placeholder","Author","allPropToHtm","hasOwnProperty","avatar","str_lifestage","userData","users","objectSpread","authorId","SubPost","text","time","images","src","alt","title","Post","author_id","_this$props$totalComm","interactionProps","commentProps","subPostProps","returnObj","question_post","question_image_url","question_time","ugc_post","ugc_image_url","ugc_time","getSubPostData","subComponents_Author","subComponents_InteractionContainer","CommentContainer_CommentContainer","elementTypeData","PostContainer","_ref$postList","postList","postHtm","item","post_Post","assign","App","axios","get","then","updateFeedData","feedData","initialState","feedposts","questions","Boolean","window","location","hostname","match","store","createStore","arguments","length","undefined","action","updatedStateField","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.163b8189.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function CardDesign({children,className=''}) {\n\treturn (\n\t\t<div className={`white-card ${className}`}>{children}</div>\n\t);\n}","const getTimeDiffFromNow = (date)=>{\n    //TODO can use moment\n    //Or logic can be improved\n    const now = Date.now();\n    if(typeof date === 'string') {\n        date = new Date(date);\n    }\n    const timeDiff = now - date;\n    const seconds = timeDiff/1000;\n    if (seconds<0) {\n        return 'Just now';\n    } else if(seconds<60) {\n        return `${Math.floor(seconds)} secs`;\n    } else if(seconds<(60 * 60)) {\n        return `${Math.floor(seconds/60)} m`;\n    } else if(seconds<(3600 * 24)) {\n        return `${Math.floor(seconds/3600)} h`;\n    } else if(seconds<(86400 * 7)) {\n        return `${Math.floor(seconds/86400)} d`;\n    } else if(seconds<(604800 * 52)){\n        return `${Math.floor(seconds/604800)} w`;\n    } else {\n        return `${Math.floor(seconds/31449600)} y`;\n    }\n}\n\nconst getPostTypeText = (element_type)=>{\n    let postTypeText = \"\";\n\tswitch(element_type){\n\t\tcase 'questions':\n\t\t\tpostTypeText = \"Answer\";\n\t\t\tbreak;\n\t\tcase 'feedposts' :\n\t\t\tpostTypeText = \"Comment\";\n\t\t\tbreak;\n\t\tdefault :\n\t\tpostTypeText = \"Comment\";\n    }\n    return postTypeText;\n}\nconst getSubPostData = (element_type,data)=>{\n    let returnObj = {};\n    switch(element_type){\n\t\tcase 'questions':\n            returnObj = {\n                images: data.images,\n                text: data.question_post,\n                imageUrl: data.question_image_url,\n                time: data.question_time\n            };\n\t\t\tbreak;\n\t\tcase 'feedposts' :\n            returnObj = {\n                images: data.images,\n                text: data.ugc_post,\n                imageUrl: data.ugc_image_url,\n                time: data.ugc_time\n            };\n\t\t\tbreak;\n\t\tdefault :\n\t\t    returnObj = {};\n    }\n    return returnObj;\n}\n\nexport {\n    getSubPostData,\n    getPostTypeText,\n    getTimeDiffFromNow\n};","import React, {Component}  from 'react';\nimport { connect } from 'react-redux';\nimport { updateLike } from '../../../reduxHelpers/actions';\nimport { getPostTypeText } from '../../utills';\n\nconst mapStateToProps = (state,ownProps) => {\n    const elementTypeData = state[ownProps.element_type] || {};\n\tconst elementData = elementTypeData[ownProps.element_id] || {}\n\treturn {\n\t\ttotalLikes : elementData.totalLikes,\n\t\ttotalComments : elementData.totalComments\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLikeClick: (data) => dispatch(updateLike(data))\n    }\n}\n\nclass InteractionContainer extends Component {\n\thandleLikeIconClick = ()=>{\n\t\tconst {\n\t\t\telement_id,\n\t\t\tonLikeClick,\n\t\t\telement_type,\n\t\t\ttotalLikes=0,\n\t\t} = this.props;\n\t\tonLikeClick({\n\t\t\telement_id,\n\t\t\telement_type,\n\t\t\tnewLikeCount: totalLikes + 1\n\t\t});\n\t}\n\thandleCommentClick = ()=>{\n\t\t//commentClickHandler\n\t}\n\trender(){\n\t\tconst {\n\t\t\telement_type,\n\t\t\ttotalLikes=0,\n\t\t\ttotalComments=0,\n\t\t} = this.props;\n\t\tconst postTypeText = getPostTypeText(element_type);\n\t\treturn (\n\t\t\t<div className=\"interaction-container\">\n\t\t\t\t<div className=\"interaction-row\">\n\t\t\t\t\t<div className=\"count-text\">{totalLikes} Likes</div>\n\t\t\t\t\t<div className=\"count-text\">{`${totalComments} ${postTypeText}s`}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"interaction-row\" >\n\t\t\t\t\t<div className = \"icon-container cursor-pointer\" onClick={this.handleLikeIconClick} >\n\t\t\t\t\t\t<i className=\"icon-heart\" />\n\t\t\t\t\t\t<span>Like</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className = \"icon-container cursor-pointer\" onClick = {this.handleCommentClick}>\n\t\t\t\t\t\t<i className=\"icon-comment\" />\n\t\t\t\t\t\t<span>{postTypeText}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(InteractionContainer);","import { UPDATE_LIKE , UPDATE_FEED_DATA } from './constants';\nconst updateLike = (data) =>({\n    type: UPDATE_LIKE,\n    payload: data\n})\nconst updateFeedData = (data) =>({\n    type: UPDATE_FEED_DATA,\n    payload: data\n})\nexport {\n    updateLike,\n    updateFeedData\n}","const UPDATE_LIKE = 'UPDATE_LIKE';\nconst UPDATE_FEED_DATA = 'UPDATE_FEED_DATA';\nexport {\n    UPDATE_LIKE,\n    UPDATE_FEED_DATA\n}","import React from 'react';\nexport default function UserProfileIcon ({imageUrl, name}){\n    const defaultImage = \"https://s3-ap-southeast-1.amazonaws.com/babychakraserviceproviders/users/default.png\";\n    const iconStyle = {\n        backgroundImage : `url('${imageUrl || defaultImage}')`\n    }\n    return (\n        <div className=\"user-profile-wrapper\">\n            <div className=\"user-profile-icon\" style={iconStyle} />\n        </div>\n    );\n}","import React, {Component} from 'react';\nimport UserProfileIcon from './UserProfileIcon';\nimport { getPostTypeText } from '../../utills';\n\nexport default class CommentContainer extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            commentData : props.commentData || [],\n        };\n    }\n    getComments = (commentData)=>{\n        return commentData.map((value, index)=>{\n            return (\n                <div className=\"comment\" key={`comment-${index}`}>\n                    <div className=\"comment-middle-section\">\n                        <div className=\"comment-text-container\">\n                            <div className=\"user-name\">{value.customerData.name}</div>\n                            <div>{value.commentText}</div>\n                        </div>\n                    </div>\n                </div>\n            );\n        })\n    }\n    addNewComment = (data)=>{\n        this.setState((prevState=>{\n            prevState.commentData.push(data);\n            return prevState;\n        }));\n    }\n    postComment = ()=>{\n\n    }\n    render () {\n        const postTypeText = getPostTypeText(this.props.element_type);\n        return (\n            <div className=\"comment-conatainer\">\n                {this.getComments(this.state.commentData)}\n                <div className=\"add-comment\">\n                    <UserProfileIcon />\n                    <div className=\"write-something-wrapper\">\n                        <input placeholder=\"Write Something here...\" />\n                        <button onClick={this.postComment} >{postTypeText}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport UserProfileIcon from './UserProfileIcon'\n\nconst mapStateToProps = (state,ownProps) => {\n    const userData = state.users || {};\n    return {\n        ...userData[ownProps.authorId],\n    };\n};\nclass Author extends Component {\n    renderAllProps () {\n        const allPropToHtm = [];\n        for(const key in this.props){\n            if(this.props.hasOwnProperty(key)) {\n                const value = this.props[key];\n                if(value && (typeof value === 'string' || typeof value === 'number')) {\n                    allPropToHtm.push(\n                        <div key={`author-${key}`}>\n                            <span>{key} : </span>\n                            <span>{value}</span>\n                        </div>\n                    );\n                }\n            }\n        }\n        return allPropToHtm;\n    }\n    render(){\n        return (\n            <div className=\"author-container\">\n                <UserProfileIcon imageUrl = {this.props.avatar} name={this.props.name} />\n                <div>\n                    <div className=\"user-name\">{this.props.name}</div>\n                    <div className=\"user-lifestage-status\">{this.props.str_lifestage}</div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default connect(mapStateToProps)(Author);","import React from 'react';\n\nexport default function SubPost ({text,imageUrl,time,images}){\n    return (\n        <div className=\"sub-post-container\">\n            <div className=\"text-container\">{text}</div>\n            {imageUrl ? \n                <div className=\"image-container\">\n                    <img src={imageUrl} alt={text} title={text} />\n                </div>\n                : null\n            }\n        </div>\n    );\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardDesign from \"../commonComponents/CardDesign\";\nimport Interactions from './subComponents/InteractionContainer';\nimport CommentContainer from './subComponents/CommentContainer';\nimport Author from './subComponents/Author';\nimport SubPost from './subComponents/SubPost';\nimport { getSubPostData } from '../utills';\n\nconst mapStateToProps = (state,ownProps) => {\n    const elementTypeData = state[ownProps.element_type] || {};\n    return {\n        ...elementTypeData[ownProps.element_id]\n    };\n};\n\nclass Post extends Component{\n    render(){\n        const {\n            author_id,\n            element_id,\n            element_type,\n            totalComments=0\n        } = this.props;\n        const interactionProps = {\n            element_id,\n            element_type\n        };\n        const commentProps = {\n            element_type,\n            totalComments\n        };\n        const subPostProps = getSubPostData(element_type,this.props);\n        return (\n            <CardDesign>\n                <Author authorId={author_id} />\n                <SubPost {...subPostProps} />\n                <Interactions {...interactionProps} />\n                <CommentContainer {...commentProps} />\n            </CardDesign>\n        );\n    }\n}\nexport default connect(mapStateToProps)(Post);","import React from 'react';\n//import Post from \"./post/PostCodeSplit\";\nimport Post from \"./post/Post\";\n\nexport default function PostContainer ({postList = []}) {\n    const postHtm = postList.map((item, index)=>{\n        return <Post {...item} key={`post-${index}-id-${item.element_id}`} />;\n    });\n    return (\n        <div className=\"social-posts-wrapper\">\n            <div className=\"post-list-container jd-font-roboto\">\n                {postHtm}\n            </div>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { updateFeedData } from './reduxHelpers/actions';\nimport './styles/App.scss';\nimport './styles/fonts.css';\nimport PostContainer from './components/PostContainer';\n\nconst mapStateToProps = state => {\n    return {\n        feedData: state.feedData\n    };\n};\nconst mapDispatchToProps = dispatch => ({\n    updateFeedData: (data) => dispatch(updateFeedData(data))\n})\n\nclass App extends Component {\n    componentDidMount () {\n        axios.get('/feedData.json').then(data=>{\n            this.props.updateFeedData(data.data);\n        })\n    }\n    render() {\n        return (\n            <div className=\"social-feed\">\n                <PostContainer postList = {this.props.feedData} />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","import { UPDATE_LIKE , UPDATE_FEED_DATA } from \"./constants\";\n\nconst initialState = {\n    feedData: [],\n    users: {},\n    feedposts : {},\n    questions : {}\n}\n\nexport const updateState = (state=initialState,action={})=>{\n    const data = action.payload;\n    switch(action.type){\n        case UPDATE_LIKE : \n            const updatedStateField = {};\n            updatedStateField[data.element_type] = Object.assign({}, state[data.element_type] || {});\n            const selectedElement = updatedStateField[data.element_type][data.element_id] || {};\n            selectedElement.totalLikes = data.newLikeCount;\n            return {...state,...updatedStateField};\n        case UPDATE_FEED_DATA :\n            return {...state,...data};\n        default :\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore }from 'redux';\nimport { updateState } from './reduxHelpers/reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(updateState);\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}